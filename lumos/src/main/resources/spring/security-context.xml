<?xml version="1.0" encoding="UTF-8"?>  
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<context:component-scan base-package="com.sp"/>
	
	<http auto-config="true">
		<csrf disabled="true"/>
		
		<!-- 모든 사용자 접근허용 -->
		<intercept-url pattern="/index.jsp" access="permitAll"/>
		<intercept-url pattern="/concert/**" access="permitAll"/>
		<intercept-url pattern="/main" access="permitAll"/>
		<intercept-url pattern="/member/login" access="permitAll"/>
		<intercept-url pattern="/member/member" access="permitAll"/>
		<intercept-url pattern="/member/userIdCheck" access="permitAll"/>
		<intercept-url pattern="/member/logout" access="permitAll"/>
		<intercept-url pattern="/resource/**" access="permitAll"/>
		<intercept-url pattern="/goods" access="permitAll"/>
		
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/> 
		<intercept-url pattern="/**" access="hasAnyRole('ROLE_USER')"/>
		<form-login login-page="/member/login"
					login-processing-url="/member/login"
					username-parameter="userId"
					password-parameter="userPwd"
					authentication-failure-url="/member/login?login_error"
					authentication-success-handler-ref="authenticationSuccessHandler"
					default-target-url="/main"
					always-use-default-target="true"/>
		
		<logout logout-url="/member/logout"
		  		invalidate-session="true"
		  		logout-success-url="/"/>
		  		
		<access-denied-handler error-page="/member/noAuthorized"/>
		
		<session-management>
			<concurrency-control max-sessions="1" expired-url="/member/expired"/> <!-- 세션이 만료되었다는 에러메세지를 뿌릴것. -->
		</session-management>
		
	</http>
    
    <beans:bean id="authenticationSuccessHandler" class="com.sp.member.MyAuthenticationSuccessHandler">
    	<beans:property name="defaultTargetUrl" value="/main"/>
    	<beans:property name="alwaysUseDefaultTargetUrl" value="true"/>
    </beans:bean>
    <!-- 객체가 생성되었다 -->
    
    <jdbc-user-service data-source-ref="dataSource" id="userService"
    				   users-by-username-query="SELECT userId username, userPwd password,
    				   enabled FROM member1 WHERE userId=?"
    				   authorities-by-username-query="SELECT userId username, authority FROM memberAuthority
    				   where userId=?"/> <!-- 서비스객체 생성완료 -->
    
    <!-- BCrypt:패스워드 암호화에 특화된 password hashing function -->
    <beans:bean id="bCryptPassword" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    
	<authentication-manager> <!-- db걸 불러와서 인증처리를 해주는 작업. -->
		<authentication-provider user-service-ref="userService">
		<password-encoder ref="bCryptPassword"/>
		</authentication-provider>
	</authentication-manager>

</beans:beans>
