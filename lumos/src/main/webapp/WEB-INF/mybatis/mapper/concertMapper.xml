<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="concert">
	<!-- 사용자 ui -->
	<!-- 공연 검색 -->
	<sql id="where-sch_hall">
		   <if test="listSch_hall != null and listSch_hall.size != 0">
		        AND
		        (
				  <foreach collection="listSch_hall" item="sch_hall" index="index"
						 open="" close="" separator=" OR ">
					  INSTR(hallName, #{sch_hall}) &gt; 0
				  </foreach>
				)
		   </if>
	</sql>

	<select id="listSchedule" parameterType="map" resultType="com.sp.concert.Concert">
		SELECT c.concertNum,c.concertName, ch.hallName, c.conProfileImage, c.totalTime,c.content, c.genre, r.ratingName,seatPriceList,
		TO_CHAR(c.concertStart, 'YYYY-MM-DD') concertStart, TO_CHAR(c.concertEnd, 'YYYY-MM-DD') concertEnd 
		FROM concert c
		JOIN concertHall ch ON c.hallNum=ch.hallNum
		JOIN rating r ON r.ratingNum=c.ratingNum
		<where>
			(c.concertStart &lt;=TO_DATE(#{eDate}))
			AND (c.concertEnd &gt;= TO_DATE(#{sDate}))
			<include refid="where-sch_hall" />
			<if test="searchValue!=null and searchValue!='' ">
				AND (INSTR(concertName, #{searchValue}) &gt; 0)
			</if>
		</where>
		ORDER BY concertStart
	</select>
	
	<select id="listHall" resultType="String">
		SELECT hallName FROM concertHall ORDER BY hallNum asc
	</select>
	
	
	<select id="seatList" parameterType="map" resultType="com.sp.concert.Concert">
		SELECT seatLevel, concertNum,seatPrice
		FROM seatPrice sp
		JOIN seatLevel  sl ON sp.seatLevelNum=sl.seatLevelNum
		where concertNum=#{concertNum}
		ORDER BY sp.seatLevelNum
	</select>
	
	<!-- article -->
	<select id="readConcert" parameterType="Integer" resultType="com.sp.concert.Concert">
		SELECT c.concertNum,c.concertName,c.content,c.host,c.supervise,r.ratingName,c.totalTime,c.conProfileImage,
		TO_CHAR(concertStart, 'YYYY-MM-DD') concertStart, TO_CHAR(concertEnd, 'YYYY-MM-DD') concertEnd,
		 h.hallName, c.genre, seatPriceList
		FROM concert c
		JOIN concertHall h ON c.hallNum=h.hallNum
        JOIN rating r ON c.ratingNum=r.ratingNum
        WHERE concertNum=#{num}
	</select>
	
	<update id="updateConcert" parameterType="com.sp.concert.Concert">
		UPDATE concert SET content=#{content} WHERE concertNum=#{concertNum}
	</update>
	
	<select id="updateSeatPrice" parameterType="map">
		UPDATE concert SET seatPriceList=#{seatPriceList} WHERE concertNum=#{concertNum}
	</select>
	
	<insert id="insertBoardLike" parameterType="map">
		INSERT INTO concertInterest (concertNum, userId) VALUES(#{concertNum},#{userId})
	</insert>
	
	<delete id="deleteBoardLike" parameterType="map">
		DELETE FROM concertInterest WHERE concertNum=#{concertNum} AND userId=#{userId}
	</delete>
	
	<select id="countBoardLike" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM concertInterest WHERE concertNum=#{concertNum} AND userId=#{userId}
	</select>
	
	<select id="listConcertHall" resultType="com.sp.concert.Concert">
		SELECT hallName, hallNum FROM concertHall ORDER BY hallNum asc
	</select>
	
	<select id="readConcertHall" parameterType="Integer"  resultType="com.sp.concert.Concert">
		SELECT hallName, hallNum, totalSeat, content,disabled,nondisabled FROM concertHall WHERE hallNum=#{num}
	</select>
	
	<update id="updateConcertHall" parameterType="com.sp.concert.Concert">
		UPDATE concertHall SET content=#{content} WHERE hallNum=#{hallNum}
	</update>
	
	
	<!-- 공연 리뷰 -->		
	<insert id="insertConReview" parameterType="com.sp.concert.ConReview">
		INSERT INTO concertreview (creviewNum, userId,subject,content,concertNum,score) 
				 VALUES(CONCERTREVIEW_SEQ.NEXTVAL,#{userId},#{subject},#{content},#{concertNum},#{score})
	</insert>
	
	<select id="readConReviewForUpdate" parameterType="map"  resultType="com.sp.concert.ConReview">
		SELECT creviewNum, subject, content, score FROM concertreview WHERE concertNum=#{concertNum} and userId=#{userId}
	</select>
	
	<update id="updateConReview" parameterType="com.sp.concert.ConReview">
		UPDATE concertreview SET subject=#{subject}, content=#{content}, score=#{score}
			WHERE creviewNum=#{creviewNum}
	</update>
</mapper>