<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="concert"> <!-- 일정등록용 -->
	<!-- location용 -->
	<insert id="insertlocation" parameterType="com.sp.admin.scheduler.ConcertSch">
		INSERT INTO location (locationNum, locationName)
			VALUES (locationNum_seq.NEXTVAL, #{locationName})
	</insert>
	
	<update id="updatelocation" parameterType="com.sp.admin.scheduler.ConcertSch">
		UPDATE location SET locationName=#{locationName}
		WHERE locationNum=#{locationNum}
	</update>
	
	<delete id="deletelocation" parameterType="Integer">
		DELETE FROM location WHERE locationNum=#{locationNum}
	</delete>
	
	<select id="readlocation" parameterType="Integer" resultType="com.sp.admin.scheduler.ConcertSch">
	SELECT locationNum, locationName FROM location WHERE locationNum=#{locationNum}
	</select>
	
	<select id="listlocation" resultType="com.sp.admin.scheduler.ConcertSch">
		SELECT locationNum, locaationName FROM location
	</select>
	
	<!--  <insert id="inserthall" parameterType="com.sp.admin.ConcertSch">
		INSERT INTO concertHall (hallNum,hallName,totalSeat,)
	</insert>  -->
	
	
	
	
	<!-- 사용자 ui -->
	<!-- 공연 검색 -->
	<sql id="where-sch_hall">
		   <if test="listSch_hall != null and listSch_hall.size != 0">
		        AND
		        (
				  <foreach collection="listSch_hall" item="sch_hall" index="index"
						 open="" close="" separator=" OR ">
					  INSTR(hallName, #{sch_hall}) &gt; 0
				  </foreach>
				)
		   </if>
	</sql>

	<select id="listSchedule" parameterType="map" resultType="com.sp.concert.Concert">
		SELECT c.concertNum,c.concertName, ch.hallName, c.conProfileImage, c.totalTime, c.genre, r.ratingName,seatPriceList,
		TO_CHAR(c.concertStart, 'YYYY-MM-DD') concertStart, TO_CHAR(c.concertEnd, 'YYYY-MM-DD') concertEnd 
		FROM concert c
		JOIN concertHall ch ON c.hallNum=ch.hallNum
		JOIN rating r ON r.ratingNum=c.ratingNum
		<where>
			(c.concertStart &lt;=TO_DATE(#{eDate}))
			AND (c.concertEnd &gt;= TO_DATE(#{sDate}))
			<include refid="where-sch_hall" />
			<if test="searchValue!=null and searchValue!='' ">
				AND (INSTR(concertName, #{searchValue}) &gt; 0)
			</if>
		</where>
	</select>
	
	<select id="listHall" resultType="String">
		SELECT hallName FROM concertHall 
	</select>
	
	
	<select id="seatList" parameterType="map" resultType="com.sp.concert.Concert">
		SELECT seatLevel, concertNum,seatPrice
		FROM seatPrice sp
		JOIN seatLevel  sl ON sp.seatLevelNum=sl.seatLevelNum
		where concertNum=#{concertNum}
		ORDER BY sp.seatLevelNum
	</select>
	
	<!-- article -->
	<select id="readConcert" parameterType="Integer" resultType="com.sp.concert.Concert">
		SELECT c.concertNum,c.concertName,c.content,c.host,c.supervise,r.ratingName,c.totalTime,c.conProfileImage,
		TO_CHAR(concertStart, 'YYYY-MM-DD') concertStart, TO_CHAR(concertEnd, 'YYYY-MM-DD') concertEnd,
		 h.hallName, c.genre, seatPriceList
		FROM concert c
		JOIN concertHall h ON c.hallNum=h.hallNum
        JOIN rating r ON c.ratingNum=r.ratingNum
        WHERE concertNum=#{num}
	</select>
	
	<select id="updateSeatPrice" parameterType="map">
		UPDATE concert SET seatPriceList=#{seatPriceList} WHERE concertNum=#{concertNum}
	</select>
	
	<insert id="insertBoardLike" parameterType="map">
		INSERT INTO concertInterest (concertNum, userId) VALUES(#{concertNum},#{userId})
	</insert>
	
	<delete id="deleteBoardLike" parameterType="map">
		DELETE FROM concertInterest WHERE concertNum=#{concertNum} AND userId=#{userId}
	</delete>
	
	<select id="countBoardLike" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM concertInterest WHERE concertNum=#{concertNum} AND userId=#{userId}
	</select>
	
</mapper>